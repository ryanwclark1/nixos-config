// =============================================================================
// LOG PROCESSING COMPONENTS
// =============================================================================
//
// This module contains all log processing configurations for:
// - JSON log parsing
// - Structured data extraction
// - Log format normalization
// - Error pattern detection
//
// =============================================================================

// Process JSON logs to extract structured fields
loki.process "json_parser" {
	forward_to = [
		loki.relabel.log_level.receiver,
	]

	stage.json {
		expressions = {
			"timestamp"     = "timestamp",
			"level"         = "level",
			"message"       = "message",
			"service"       = "service",
			"trace_id"      = "trace_id",
			"span_id"       = "span_id",
			"user_id"       = "user_id",
			"request_id"    = "request_id",
			"method"        = "method",
			"path"          = "path",
			"status_code"   = "status_code",
			"response_time" = "response_time",
			"bytes"         = "bytes",
			"ip"            = "ip",
			"user_agent"    = "user_agent",
			"error"         = "error",
			"error_code"    = "error_code",
			"stack_trace"   = "stack_trace",
		}
	}
}

// Process Docker JSON logs
loki.process "docker_json_parser" {
	forward_to = [
		loki.relabel.docker_logs_enhanced.receiver,
	]

	stage.json {
		expressions = {
			"log"    = "log",
			"stream" = "stream",
			"time"   = "time",
			"attrs"  = "attrs",
			"tag"    = "tag",
		}
	}

	stage.regex {
		expression = "^(?P<timestamp>\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d+Z)\\s+(?P<level>\\w+)\\s+(?P<message>.*)$"
		source     = "log"
	}
}

// Process systemd journal logs for better parsing
loki.process "journal_parser" {
	forward_to = [
		loki.relabel.journal_enhanced.receiver,
	]

	// Extract timestamp from journal
	stage.regex {
		expression = "^(?P<timestamp>\\w+\\s+\\d{1,2}\\s+\\d{2}:\\d{2}:\\d{2})\\s+(?P<hostname>\\S+)\\s+(?P<service>[^\\[]+)\\[(?P<pid>\\d+)\\]:\\s+(?P<message>.*)$"
		source     = "__raw_log_message__"
	}

	// Extract priority levels
	stage.regex {
		expression = ".*\\[(?P<priority>EMERG|ALERT|CRIT|ERR|WARNING|NOTICE|INFO|DEBUG)\\].*"
		source     = "__raw_log_message__"
	}

	// Extract service names from journal
	stage.regex {
		expression = ".*(?P<service_name>[a-zA-Z0-9_-]+)\\.service.*"
		source     = "unit"
	}
}

// Process authentication logs for security analysis
loki.process "auth_log_parser" {
	forward_to = [
		loki.relabel.log_level.receiver,
	]

	// Parse SSH login attempts
	stage.regex {
		expression = ".*sshd\\[\\d+\\]:\\s+(?P<event_type>Accepted|Failed|Invalid)\\s+(?P<auth_method>password|publickey|keyboard-interactive)\\s+for\\s+(?P<user>\\S+)\\s+from\\s+(?P<source_ip>\\d+\\.\\d+\\.\\d+\\.\\d+)\\s+port\\s+(?P<source_port>\\d+).*"
		source     = "__raw_log_message__"
	}

	// Parse sudo usage
	stage.regex {
		expression = ".*sudo:\\s+(?P<user>\\S+)\\s+:\\s+(?P<event_type>TTY|command|session)\\s+;\\s+(?P<details>.*)"
		source     = "__raw_log_message__"
	}

	// Parse failed login attempts
	stage.regex {
		expression = ".*Failed\\s+password\\s+for\\s+(?P<user>\\S+)\\s+from\\s+(?P<source_ip>\\d+\\.\\d+\\.\\d+\\.\\d+)\\s+port\\s+(?P<source_port>\\d+)\\s+(?P<protocol>ssh2).*"
		source     = "__raw_log_message__"
	}
}

// Process firewall logs
loki.process "firewall_log_parser" {
	forward_to = [
		loki.relabel.log_level.receiver,
	]

	// Parse UFW logs
	stage.regex {
		expression = ".*\\[UFW\\s+(?P<action>ALLOW|BLOCK|LOG)\\]\\s+(?P<protocol>IN|OUT)\\s+(?P<source_ip>\\d+\\.\\d+\\.\\d+\\.\\d+)\\s+(?P<dest_ip>\\d+\\.\\d+\\.\\d+\\.\\d+)\\s+(?P<source_port>\\d+)\\s+(?P<dest_port>\\d+).*"
		source     = "__raw_log_message__"
	}

	// Parse iptables logs
	stage.regex {
		expression = ".*SRC=(?P<source_ip>\\d+\\.\\d+\\.\\d+\\.\\d+)\\s+DST=(?P<dest_ip>\\d+\\.\\d+\\.\\d+\\.\\d+)\\s+.*PROTO=(?P<protocol>\\w+)\\s+SPT=(?P<source_port>\\d+)\\s+DPT=(?P<dest_port>\\d+).*"
		source     = "__raw_log_message__"
	}
}

// Process web server logs
loki.process "web_log_parser" {
	forward_to = [
		loki.relabel.log_level.receiver,
	]

	// Parse common log format
	stage.regex {
		expression = "^(?P<source_ip>\\d+\\.\\d+\\.\\d+\\.\\d+)\\s+-\\s+-\\s+\\[(?P<timestamp>\\d{2}/\\w{3}/\\d{4}:\\d{2}:\\d{2}:\\d{2}\\s+[+-]\\d{4})\\]\\s+\"(?P<method>\\w+)\\s+(?P<path>\\S+)\\s+HTTP/(?P<http_version>\\d\\.\\d)\"\\s+(?P<status_code>\\d+)\\s+(?P<bytes>\\d+)\\s+\"(?P<referer>[^\"]*)\"\\s+\"(?P<user_agent>[^\"]*)\""
		source     = "__raw_log_message__"
	}

	// Parse combined log format
	stage.regex {
		expression = "^(?P<source_ip>\\d+\\.\\d+\\.\\d+\\.\\d+)\\s+-\\s+(?P<user>\\S+)\\s+\\[(?P<timestamp>\\d{2}/\\w{3}/\\d{4}:\\d{2}:\\d{2}:\\d{2}\\s+[+-]\\d{4})\\]\\s+\"(?P<method>\\w+)\\s+(?P<path>\\S+)\\s+HTTP/(?P<http_version>\\d\\.\\d)\"\\s+(?P<status_code>\\d+)\\s+(?P<bytes>\\d+)\\s+\"(?P<referer>[^\"]*)\"\\s+\"(?P<user_agent>[^\"]*)\"\\s+\"(?P<forwarded_for>[^\"]*)\""
		source     = "__raw_log_message__"
	}
}

// Process database logs
loki.process "database_log_parser" {
	forward_to = [
		loki.relabel.log_level.receiver,
	]

	// Parse PostgreSQL logs
	stage.regex {
		expression = "^(?P<timestamp>\\d{4}-\\d{2}-\\d{2}\\s+\\d{2}:\\d{2}:\\d{2}\\.\\d+\\s+\\w+)\\s+(?P<level>\\w+):\\s+(?P<message>.*)"
		source     = "__raw_log_message__"
	}

	// Extract PostgreSQL specific fields
	stage.regex {
		expression = ".*duration:\\s+(?P<duration>\\d+\\.\\d+)\\s+ms\\s+statement:\\s+(?P<statement>.*)"
		source     = "__raw_log_message__"
	}

	// Parse MySQL logs
	stage.regex {
		expression = "^(?P<timestamp>\\d{4}-\\d{2}-\\d{2}\\s+\\d{2}:\\d{2}:\\d{2})\\s+(?P<level>\\w+)\\s+(?P<message>.*)"
		source     = "__raw_log_message__"
	}
}

// Process application logs with structured data
loki.process "app_log_parser" {
	forward_to = [
		loki.relabel.log_level.receiver,
	]

	// Extract structured log fields
	stage.regex {
		expression = ".*\\[(?P<timestamp>\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d+Z)\\]\\s+(?P<level>\\w+)\\s+\\[(?P<service>\\w+)\\]\\s+(?P<message>.*)"
		source     = "__raw_log_message__"
	}

	// Extract request IDs
	stage.regex {
		expression = ".*request_id=(?P<request_id>[a-f0-9-]+).*"
		source     = "__raw_log_message__"
	}

	// Extract user sessions
	stage.regex {
		expression = ".*session_id=(?P<session_id>[a-f0-9-]+).*"
		source     = "__raw_log_message__"
	}
}

// Process Kubernetes logs
loki.process "k8s_log_parser" {
	forward_to = [
		loki.relabel.log_level.receiver,
	]

	// Parse Kubernetes log format
	stage.regex {
		expression = "^(?P<timestamp>\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d+Z)\\s+(?P<level>\\w+)\\s+(?P<message>.*)"
		source     = "__raw_log_message__"
	}

	// Extract Kubernetes metadata
	stage.regex {
		expression = ".*pod=(?P<pod_name>[a-zA-Z0-9_-]+).*"
		source     = "__raw_log_message__"
	}

	stage.regex {
		expression = ".*namespace=(?P<namespace>[a-zA-Z0-9_-]+).*"
		source     = "__raw_log_message__"
	}

	stage.regex {
		expression = ".*container=(?P<container_name>[a-zA-Z0-9_-]+).*"
		source     = "__raw_log_message__"
	}
}

// Process error logs with stack traces
loki.process "error_log_parser" {
	forward_to = [
		loki.relabel.log_level.receiver,
	]

	// Extract error types
	stage.regex {
		expression = ".*(?P<error_type>Exception|Error|Fatal|Panic):\\s+(?P<error_message>.*)"
		source     = "__raw_log_message__"
	}

	// Extract stack trace information
	stage.regex {
		expression = ".*at\\s+(?P<function>\\S+)\\s+\\((?P<file>\\S+):(?P<line>\\d+)\\).*"
		source     = "__raw_log_message__"
	}

	// Extract error codes
	stage.regex {
		expression = ".*error_code=(?P<error_code>\\d+).*"
		source     = "__raw_log_message__"
	}
}
