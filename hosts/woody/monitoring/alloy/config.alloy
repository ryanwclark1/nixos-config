// =============================================================================
// GRAFANA ALLOY CONFIGURATION FOR WOODY
// =============================================================================
//
// This configuration provides comprehensive monitoring for the woody server:
// - System metrics collection (CPU, memory, disk, network)
// - Process monitoring and filtering
// - Container metrics via cAdvisor
// - Network device monitoring via SNMP (Ubiquiti devices)
// - Network connectivity monitoring via Blackbox
// - Comprehensive log collection and processing
//   - Systemd journal logs
//   - File-based application logs
//   - Docker container logs
// - Advanced log processing with structured data extraction
//
// =============================================================================

// =============================================================================
// REMOTE WRITE CONFIGURATIONS
// =============================================================================

// Loki remote write for log aggregation with rate limiting
loki.write "local" {
	endpoint {
		url = "http://localhost:3100/loki/api/v1/push"

		// Batch configuration to reduce request rate
		batch_wait = "5s"
		batch_size = "1MB"

		// Enable retry on rate limit errors
		retry_on_http_429 = true
	}

	// Buffer configuration for log reliability
	external_labels = {
		"host"        = "woody",
		"component"   = "alloy",
		"environment" = "production",
	}

	// WAL configuration to handle bursts
	wal {
		enabled         = true
		max_segment_age = "1h"
	}
}

// Prometheus remote write for metrics with retry and timeout
prometheus.remote_write "local" {
	endpoint {
		url = "http://woody:9090/api/v1/write"
	}
	external_labels = {
		"host"        = "woody",
		"component"   = "alloy",
		"environment" = "production",
	}
}

// =============================================================================
// LOG SOURCES
// =============================================================================

// Journal source for reading systemd journal logs with enhanced relabeling
loki.source.journal "read" {
	forward_to = [
		loki.relabel.journal_volume_filter.receiver,
	]
	labels = {
		"job"       = "journal",
		"host"      = "woody",
		"component" = "alloy",
		"source"    = "systemd-journal",
	}
}

// File source for reading application logs with enhanced configuration
loki.source.file "local_files" {
	targets = [
		{
			__path__ = "/var/log/*.log",
			job      = "varlogs",
			host     = "woody",
		},
		{
			__path__ = "/var/log/nginx/*.log",
			job      = "nginx",
			host     = "woody",
		},
		{
			__path__ = "/var/log/postgresql/*.log",
			job      = "postgresql",
			host     = "woody",
		},
		{
			__path__ = "/var/log/applications/*.log",
			job      = "applications",
			host     = "woody",
		},
	]
	forward_to = [
		loki.relabel.file_logs.receiver,
	]
}

// Docker container logs source
loki.source.docker "docker" {
	host       = "unix:///var/run/docker.sock"
	targets    = []
	forward_to = [
		loki.relabel.docker_logs_enhanced.receiver,
	]
	labels = {
		"job"       = "docker",
		"host"      = "woody",
		"component" = "alloy",
		"source"    = "docker",
	}
}

// =============================================================================
// RELABELING RULES
// =============================================================================

// Volume filter for journal logs to reduce ingestion rate
loki.relabel "journal_volume_filter" {
	forward_to = [
		loki.relabel.journal.receiver,
	]

	// Drop debug and info level logs to reduce volume
	rule {
		source_labels = ["__journal_priority"]
		regex         = "[5-7]" // 5=notice, 6=info, 7=debug
		action        = "drop"
	}

	// Drop noisy services that generate too many logs
	rule {
		source_labels = ["__journal__systemd_unit"]
		regex         = "(systemd-journal|systemd-logind|NetworkManager|chronyd|audit)\\.service"
		action        = "drop"
	}
}

// Enhanced relabel rules for journal logs
loki.relabel "journal" {
	forward_to = [
		loki.relabel.journal_enhanced.receiver,
	]

	rule {
		source_labels = ["__journal__systemd_unit"]
		target_label  = "unit"
	}

	rule {
		source_labels = ["__journal_priority_keyword"]
		target_label  = "level"
	}

	rule {
		source_labels = ["__journal__hostname"]
		target_label  = "instance"
	}
}

// Enhanced journal processing with service categorization
loki.relabel "journal_enhanced" {
	forward_to = [
		loki.relabel.log_level.receiver,
	]

	// Add host label
	rule {
		target_label = "host"
		replacement  = "woody"
	}

	// Add component label
	rule {
		target_label = "component"
		replacement  = "systemd"
	}

	// Categorize systemd units by service type
	rule {
		source_labels = ["unit"]
		regex         = ".*(ssh|sshd).*"
		target_label  = "service_category"
		replacement   = "remote_access"
	}

	rule {
		source_labels = ["unit"]
		regex         = ".*(docker|containerd).*"
		target_label  = "service_category"
		replacement   = "container_runtime"
	}

	rule {
		source_labels = ["unit"]
		regex         = ".*(prometheus|grafana|alloy).*"
		target_label  = "service_category"
		replacement   = "monitoring"
	}
}

// Enhanced relabel rules for file logs
loki.relabel "file_logs" {
	forward_to = [
		loki.relabel.file_logs_enhanced.receiver,
	]

	rule {
		source_labels = ["__path__"]
		target_label  = "file_path"
	}

	rule {
		source_labels = ["__path__"]
		regex         = ".*/([^/]+)\\.log"
		target_label  = "service"
		replacement   = "$1"
	}
}

// Enhanced file log processing
loki.relabel "file_logs_enhanced" {
	forward_to = [
		loki.relabel.log_level.receiver,
	]

	// Add host label
	rule {
		target_label = "host"
		replacement  = "woody"
	}

	// Add component label
	rule {
		target_label = "component"
		replacement  = "file_logs"
	}
}

// Enhanced Docker container logs processing
loki.relabel "docker_logs_enhanced" {
	forward_to = [
		loki.relabel.log_level.receiver,
	]

	// Add host label
	rule {
		target_label = "host"
		replacement  = "woody"
	}

	// Add component label
	rule {
		target_label = "component"
		replacement  = "docker"
	}
}

// Generic relabel rule to extract log levels from messages
loki.relabel "log_level" {
	forward_to = [
		loki.write.local.receiver,
	]

	// Extract log levels from various formats
	rule {
		source_labels = ["__raw_log_message__"]
		regex         = ".*level=(debug|info|warn|error|fatal).*"
		target_label  = "level"
		replacement   = "$1"
	}

	rule {
		source_labels = ["__raw_log_message__"]
		regex         = ".*severity=(debug|info|warning|error|critical).*"
		target_label  = "level"
		replacement   = "$1"
	}
}

// =============================================================================
// METRICS COLLECTION
// =============================================================================

// Self-monitoring for Alloy health and performance
prometheus.scrape "self" {
	targets = [
		{
			"__address__" = "127.0.0.1:12345",
			"job"         = "alloy_self",
		},
	]
	forward_to = [
		prometheus.remote_write.local.receiver,
	]
	scrape_interval  = "30s"
	scrape_timeout   = "10s"
	honor_labels     = true
	honor_timestamps = true
	metrics_path     = "/metrics"
	scheme           = "http"
}

// Unix exporter for comprehensive system metrics
prometheus.exporter.unix "unix" {
	disable_collectors = [
		"ipvs",
		"infiniband",
		"xfs",
		"zfs",
	]
	enable_collectors = [
		"cpu",
		"diskstats",
		"filefd",
		"filesystem",
		"hwmon",
		"interrupts",
		"ksmd",
		"loadavg",
		"logind",
		"meminfo",
		"mountstats",
		"netdev",
		"netstat",
		"processes",
		"sockstat",
		"stat",
		"systemd",
		"textfile",
		"time",
		"uname",
		"vmstat",
	]
}

prometheus.scrape "unix" {
	targets    = prometheus.exporter.unix.unix.targets
	forward_to = [
		prometheus.remote_write.local.receiver,
	]
	scrape_interval  = "15s"
	scrape_timeout   = "10s"
	honor_labels     = true
	honor_timestamps = true
	metrics_path     = "/metrics"
	scheme           = "http"
}

// Process exporter for detailed process monitoring
prometheus.exporter.process "process" {
	// The process exporter runs internally and exposes metrics about processes
}

// Scrape the process exporter's own metrics
prometheus.scrape "process_exporter" {
	targets    = prometheus.exporter.process.process.targets
	forward_to = [
		prometheus.remote_write.local.receiver,
	]
	scrape_interval  = "15s"
	scrape_timeout   = "10s"
	job_name         = "process_exporter"
}

// cAdvisor exporter for container metrics
prometheus.exporter.cadvisor "cadvisor" {
	docker_host = "unix:///var/run/docker.sock"
}

prometheus.scrape "cadvisor" {
	targets    = prometheus.exporter.cadvisor.cadvisor.targets
	forward_to = [
		prometheus.remote_write.local.receiver,
	]
}

// Blackbox exporter for network probing
prometheus.exporter.blackbox "blackbox" {
	config_file = "/etc/alloy/blackbox.yml"

	target {
		name    = "http_woody_prometheus"
		address = "http://woody:9090"
		module  = "http_2xx"
	}

	target {
		name    = "http_woody_grafana"
		address = "http://woody:3000"
		module  = "http_2xx"
	}

	target {
		name    = "icmp_gateway"
		address = "10.10.100.1"
		module  = "icmp"
	}
}

prometheus.scrape "blackbox" {
	targets    = prometheus.exporter.blackbox.blackbox.targets
	forward_to = [
		prometheus.remote_write.local.receiver,
	]
	scrape_interval = "60s"
	scrape_timeout  = "10s"
}

// =============================================================================
// SERVICE DISCOVERY
// =============================================================================

// Discover Docker containers for enhanced monitoring
discovery.docker "docker_containers" {
	host             = "unix:///var/run/docker.sock"
	refresh_interval = "30s"
}

// Filter Docker containers for monitoring
discovery.relabel "filtered_docker_containers" {
	targets = discovery.docker.docker_containers.targets

	rule {
		action        = "keep"
		regex         = ".*"
		source_labels = ["__meta_docker_container_label_com_docker_compose_service"]
	}

	rule {
		source_labels = ["__meta_docker_container_name"]
		target_label  = "container_name"
	}

	rule {
		source_labels = ["__meta_docker_container_image"]
		target_label  = "container_image"
	}
}

// Scrape metrics from Docker containers
prometheus.scrape "docker_containers" {
	targets    = discovery.relabel.filtered_docker_containers.output
	forward_to = [
		prometheus.remote_write.local.receiver,
	]
	scrape_interval  = "30s"
	scrape_timeout   = "10s"
	honor_labels     = true
	honor_timestamps = true
	metrics_path     = "/metrics"
}

// =============================================================================
