(defwindow media
  :namespace	"media"
  :monitor      0
  :stacking     "fg"
  :geometry     (geometry
                  :anchor "top center"
                  :width  "20%"
                  :height "200px"
                )
  (box
    :space-evenly false
	:valign "start"
    (revealer
      :transition "slideup"
      :reveal     mediarev
      :duration   "200ms"
      (music-player)
    )
  )
)

(defvar mediarev false)

(deflisten music
  :initial     "{\"title\":\"No Media is Currently Playing\",\"artist\":\"-x-x-x-\",\"album\":\"\",\"artUrl\":\"./assets/pfp.png\",\"position\":1,\"positionStr\":\"\",\"length\":0,\"lengthStr\":\"\",\"status\":\"Paused\"}"
  :return-type json
  "./bar/popup-menus/media/scripts/media.sh"
)

(defwidget music-player []
  (eventbox
	:onhoverlost "./bar/popup-menus/media/scripts/toggle-music.sh"
	(box
      :class        "container"
      :space-evenly  false
      :orientation   "v"

      ;; Thumbnail and descriptions
      (box
        :class        "title"
        :orientation   "h"
        :space-evenly  false

        (box
          :class "music-thumbnail"
          :style "background-image: url('${music.artUrl}');"
        )

        (box
          :class       "music-desc"
          :orientation  "v"
          :space-evenly false

          (label
            :class       "main-title"
            :limit-width 20
            :lines       2
            :height      80
            :justify     "center"
	    :xalign	 0.5
            :text        "${music.title}"
          )

          (label
            :class       "artist"
            :justify     "center"
            :limit-width 30
            :text        "${music.artist}"
          )
        )
      )

      ;; Progress slider
      (scale
        :class    "music-slider"
        :min      0
        :max      {music.length}
        :value    {music.position}
        :onchange "playerctl position {}"
      )

      ;; Timer labels
      (box
        :class "music-timer"
        (label :halign "start" :text "${music.positionStr}")
        (label :halign "end"   :text "${music.lengthStr}")
      )

      ;; Playback controls
      (box
        :class        "music-action"
        :orientation   "h"
        :space-evenly false
        :halign        "center"
        :spacing       45

        (eventbox
          :class   "mico"
          :cursor  "pointer"
          :onclick "playerctl previous"
          "󰒮"
        )

        (eventbox
          :class   "mico"
          :cursor  "pointer"
          :onclick "playerctl play-pause"
          {music.status == "Playing" ? "󰏤" : "󰐊"}
        )

        (eventbox
          :class   "mico"
          :cursor  "pointer"
          :onclick "playerctl next"
          "󰒭"
        )
      )
    )
  )
)
