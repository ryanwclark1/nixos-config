#!/usr/bin/env bash

# tmux-forceline Static Cava Integration Helper
# Easily integrate static cava output into tmux configurations

set -euo pipefail

readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly CAVA_STATIC_SCRIPT="${SCRIPT_DIR}/cava_static.sh"
readonly CAVA_CONFIG="${SCRIPT_DIR}/cava_static.conf"

# Function to check if cava is available
check_cava_availability() {
    if command -v cava >/dev/null 2>&1; then
        echo "‚úÖ Cava is installed and available"
        return 0
    else
        echo "‚ùå Cava is not installed"
        echo "üí° Install cava: sudo apt-get install cava (Ubuntu/Debian)"
        echo "üí° Install cava: brew install cava (macOS)"
        return 1
    fi
}

# Function to test static cava output
test_static_output() {
    echo "üß™ Testing static cava output..."
    
    if [[ -x "$CAVA_STATIC_SCRIPT" ]]; then
        echo "üìù Raw output:"
        "$CAVA_STATIC_SCRIPT"
        echo ""
        
        echo "üìù Tmux-safe output:"
        "$CAVA_STATIC_SCRIPT" tmux
        echo ""
        
        echo "üìù Cached output:"
        "$CAVA_STATIC_SCRIPT" cached
        echo ""
    else
        echo "‚ùå Static cava script not found or not executable: $CAVA_STATIC_SCRIPT"
        return 1
    fi
}

# Function to generate tmux configuration
generate_tmux_config() {
    local position="${1:-right}"
    
    cat << EOF
# tmux-forceline Static Cava Configuration
# Generated by integrate_static_cava.sh

# Source the static cava configuration
source-file "$CAVA_CONFIG"

# Add static cava to status-$position
EOF

    if [[ "$position" == "right" ]]; then
        cat << EOF
set -g status-right "#{@fl_cava_static_format_accent} %H:%M %d-%b"
EOF
    else
        cat << EOF
set -g status-left "#{@fl_session_display} #{@fl_cava_static_format_accent}"
EOF
    fi

    cat << EOF

# Alternative minimal integration
# set -g status-$position "#($CAVA_STATIC_SCRIPT tmux)"

# Alternative with icon
# set -g status-$position "üéµ #($CAVA_STATIC_SCRIPT cached)"

# Conditional display (only show when audio is active)
# set -g status-$position "#{?#{E:CAVA_AVAILABLE},#($CAVA_STATIC_SCRIPT tmux),}"
EOF
}

# Function to create a standalone tmux session for testing
create_test_session() {
    local session_name="cava-test"
    
    echo "üöÄ Creating test tmux session: $session_name"
    
    # Kill existing test session if it exists
    tmux kill-session -t "$session_name" 2>/dev/null || true
    
    # Create new session with static cava
    tmux new-session -d -s "$session_name" -c "$HOME"
    
    # Source static cava configuration
    tmux source-file "$CAVA_CONFIG"
    
    # Set status bar with static cava
    tmux set-option -t "$session_name" status-right "#($CAVA_STATIC_SCRIPT tmux) %H:%M"
    tmux set-option -t "$session_name" status-interval 1
    
    # Attach to session
    echo "‚úÖ Test session created. Attaching..."
    tmux attach-session -t "$session_name"
}

# Function to install static cava integration
install_integration() {
    local tmux_conf="${HOME}/.tmux.conf"
    local position="${1:-right}"
    
    echo "üì¶ Installing static cava integration..."
    
    # Check if tmux.conf exists
    if [[ ! -f "$tmux_conf" ]]; then
        echo "üìù Creating new tmux.conf..."
        touch "$tmux_conf"
    fi
    
    # Create backup
    cp "$tmux_conf" "${tmux_conf}.backup.$(date +%Y%m%d_%H%M%S)"
    echo "üíæ Created backup: ${tmux_conf}.backup.$(date +%Y%m%d_%H%M%S)"
    
    # Add integration
    echo "" >> "$tmux_conf"
    echo "# tmux-forceline Static Cava Integration" >> "$tmux_conf"
    echo "# Added by integrate_static_cava.sh on $(date)" >> "$tmux_conf"
    generate_tmux_config "$position" >> "$tmux_conf"
    
    echo "‚úÖ Static cava integration added to $tmux_conf"
    echo "üîÑ Reload tmux configuration: tmux source-file ~/.tmux.conf"
}

# Function to show usage examples
show_examples() {
    cat << EOF
üéµ tmux-forceline Static Cava Integration Examples

üìã Basic Usage:
   # Add to tmux.conf
   set -g status-right "#($CAVA_STATIC_SCRIPT tmux) %H:%M"

üìã With Icon:
   # Add music note emoji
   set -g status-right "üéµ #($CAVA_STATIC_SCRIPT cached) %H:%M"

üìã Conditional Display:
   # Only show when cava is available
   set -g status-right "#{?#{E:CAVA_AVAILABLE},#($CAVA_STATIC_SCRIPT tmux),} %H:%M"

üìã Themed Integration:
   # Use tmux-forceline theming
   source-file "$CAVA_CONFIG"
   set -g status-right "#{@fl_cava_static_format_accent} %H:%M"

üìã Performance Optimized:
   # Use cached output for better performance
   set -g status-right "#($CAVA_STATIC_SCRIPT cached) %H:%M"
   set -g status-interval 1

üìã Full Configuration Example:
$(generate_tmux_config right)

üìù Environment Customization:
   export FORCELINE_CAVA_UPDATE_INTERVAL=2    # Update every 2 seconds
   export FORCELINE_CAVA_MAX_WIDTH=15         # Max 15 characters
   export FORCELINE_CAVA_SHOW_TITLE=false     # Hide music note emoji

üß™ Testing Commands:
   $0 test                                     # Test static output
   $0 session                                  # Create test tmux session
   $0 install [left|right]                    # Install to ~/.tmux.conf
EOF
}

# Main function
main() {
    local command="${1:-help}"
    
    case "$command" in
        "check"|"test")
            check_cava_availability
            echo ""
            test_static_output
            ;;
        "config"|"generate")
            local position="${2:-right}"
            generate_tmux_config "$position"
            ;;
        "session"|"test-session")
            check_cava_availability || exit 1
            create_test_session
            ;;
        "install")
            local position="${2:-right}"
            check_cava_availability || exit 1
            install_integration "$position"
            ;;
        "examples")
            show_examples
            ;;
        "help"|"--help"|"-h"|*)
            cat << EOF
üéµ tmux-forceline Static Cava Integration Helper

DESCRIPTION:
    Helper script to integrate static (non-streaming) cava output into tmux.
    Provides static audio visualization that updates in place without scrolling.

USAGE:
    $0 <command> [options]

COMMANDS:
    check           Check if cava is installed and test output
    config [pos]    Generate tmux configuration (pos: left|right, default: right)
    session         Create test tmux session with static cava
    install [pos]   Install integration to ~/.tmux.conf (pos: left|right)
    examples        Show usage examples and configurations
    help            Show this help message

OPTIONS:
    pos             Position in status bar: 'left' or 'right' (default: right)

EXAMPLES:
    $0 check                    # Test if everything works
    $0 config right            # Generate config for right status bar
    $0 session                  # Test in new tmux session
    $0 install left            # Install to left status bar
    $0 examples                 # Show configuration examples

INTEGRATION:
    The static cava wrapper provides several modes:
    
    ‚Ä¢ output    - Standard static output
    ‚Ä¢ cached    - Cached output (1s cache for performance)
    ‚Ä¢ tmux      - tmux-safe output (escaped characters)
    ‚Ä¢ monitor   - Live monitoring mode
    
    Use 'cached' or 'tmux' modes for best tmux integration.

REQUIREMENTS:
    - cava installed and in PATH
    - tmux 2.6+ for best compatibility
    - Original cava.sh module (if available)
EOF
            ;;
    esac
}

# Run main function
main "$@"