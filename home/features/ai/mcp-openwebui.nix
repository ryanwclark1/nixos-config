{
  pkgs,
  config,
  ...
}:

{
  # MCP Server configuration for Open WebUI
  # MCP servers are launched on-demand by clients, not as persistent services

  home.packages = with pkgs; [
    # Required for on-demand Docker-based MCP servers
    docker
    # Native MCP servers
    nodejs
    jq
  ];



  # Create processed configuration for OpenWebUI (will be generated by activation script)
  home.activation.processMcpConfig = config.lib.dag.entryAfter ["writeBoundary"] ''
    $DRY_RUN_CMD ${pkgs.writeShellScript "process-mcp-config" ''
      #!/usr/bin/env bash
      set -euo pipefail

      SOURCE_CONFIG="${config.home.homeDirectory}/.config/open-webui/mcp-servers.json"
      OUTPUT_CONFIG="${config.home.homeDirectory}/.config/open-webui/mcp-servers-processed.json"

      if [ ! -f "$SOURCE_CONFIG" ]; then
        echo "Warning: MCP source config not found at $SOURCE_CONFIG" >&2
        exit 0
      fi

      echo "Processing MCP configuration for OpenWebUI..."

      # Read the JSON template
      template_json=$(cat "$SOURCE_CONFIG")

      # Replace {{HOME}} with actual home directory
      processed_json=$(echo "$template_json" | sed "s|{{HOME}}|${config.home.homeDirectory}|g")

      # Process SOPS secrets
      while IFS= read -r line; do
        if [[ $line =~ \{\{SOPS:([^}]+)\}\} ]]; then
          secret_key="''${BASH_REMATCH[1]}"
          secret_value=""

          # Try to read from various SOPS locations
          sops_paths=(
            "/run/secrets/''${secret_key}"
            "/run/secrets/''${secret_key/\//-}"
            "/var/lib/sops-nix/secrets/''${secret_key}"
            "/var/lib/sops-nix/secrets/''${secret_key/\//-}"
          )

          for path in "''${sops_paths[@]}"; do
            if [ -f "$path" ] && [ -r "$path" ]; then
              secret_value=$(cat "$path" 2>/dev/null || echo "")
              if [ -n "$secret_value" ]; then
                break
              fi
            fi
          done

          if [ -z "$secret_value" ]; then
            echo "Warning: Could not read SOPS secret '$secret_key', using placeholder" >&2
            secret_value="MISSING_SECRET_''${secret_key}"
          fi

          processed_json=$(echo "$processed_json" | sed "s|{{SOPS:''${secret_key}}}|''${secret_value}|g")
        fi
      done < <(echo "$processed_json" | ${pkgs.gnugrep}/bin/grep -o '{{SOPS:[^}]*}}' || true)

      # Write the processed configuration
      echo "$processed_json" > "$OUTPUT_CONFIG"

      # Validate JSON
      if ! ${pkgs.jq}/bin/jq . "$OUTPUT_CONFIG" >/dev/null 2>&1; then
        echo "Warning: Generated JSON is invalid, keeping template" >&2
        exit 1
      fi

      echo "MCP configuration processed for OpenWebUI"
    ''}
  '';

  # MCP management scripts are now located in desktop/common/scripts/system/
  # They are automatically available via the desktop common configuration
}
